{"version":3,"sources":["ne-ui/utils/BaseColorContext.js","ne-ui/utils/colorTransform.js","ne-ui/Button/Button.js","ne-ui/Input/Input.js","components/main/Main.js","App.js","serviceWorker.js","index.js"],"names":["BaseColorContext","React","createContext","primary","text","targets","darken","R","G","B","amount","map","color","Math","floor","lighten","min","makeHex","toString","colorTransform","target","colors","substring","match","strVal","parseInt","useStyles","createUseStyles","button","props","borderWidth","borderRadius","padding","fontSize","boxShadow","baseColor","flat","background","inward","outward","Button","label","onClick","type","useContext","classes","className","classNames","defaultProps","Input","placeholder","Main","visitorNumber","random","appContainer","textAlign","height","backgroundColor","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.52c52caf.chunk.js","sourcesContent":["import React from 'react';\n\nconst BaseColorContext = React.createContext({\n    primary: \"#e0e0e0\",\n    text: \"#111111\"\n});\n\nexport default BaseColorContext;\n","const targets = {\n    shadow: 0,\n    highlight: 1,\n    darkerAccent: 2,\n    lighterAccent: 3,\n};\n\nconst darken = ([R, G, B], amount = 0.8) => {\n    R *= amount;\n    G *= amount;\n    B *= amount;\n    return [R, G, B].map(color => Math.floor(color));\n};\n\nconst lighten = ([R, G, B], amount = 1.1) => {\n    R *= amount;\n    G *= amount;\n    B *= amount;\n    return [R, G, B].map(color => Math.min(Math.floor(color), 255));\n};\n\nconst makeHex = ([R, G, B]) => {\n    return \"#\" + R.toString(16) + G.toString(16) + B.toString(16)\n};\n\nconst colorTransform = (color, target) => {\n    // gets the colors into an array of format: [RRR, GGG, BBB]\n    const colors = color.substring(1).match(/.{2}/g).map(strVal => parseInt(strVal, 16));\n\n    switch(target) {\n        case targets.shadow:\n            return makeHex(darken(colors), 0.8);\n        case targets.highlight:\n            return makeHex(lighten(colors), 1.1);\n        case targets.darkerAccent:\n            return makeHex(darken(colors), 0.95);\n        case targets.lighterAccent:\n            return makeHex(lighten(colors), 1.025);\n        default:\n            return color;\n    }\n};\n\nexport default colorTransform;\nexport { targets };","import React, { useContext } from 'react';\nimport classNames from 'classnames';\nimport {createUseStyles} from 'react-jss';\nimport BaseColorContext from 'ne-ui/utils/BaseColorContext';\nimport colorTransform, { targets } from 'ne-ui/utils/colorTransform';\nimport PropTypes from 'prop-types';\n\nconst useStyles = createUseStyles({\n    button: (props) => ({\n        borderWidth: \"0\",\n        borderRadius: \"0.5em\",\n        padding: \"0.5em 1em\",\n        fontSize: \"1em\",\n        boxShadow: `0.25rem 0.25rem 0.5rem ${colorTransform(props.baseColor.primary, targets.shadow)}, -0.25rem -0.25rem 0.5rem ${colorTransform(props.baseColor.primary, targets.highlight)}`,\n        color: props.baseColor.text,\n\n        \"&:active\": {\n            boxShadow: `inset 0.25rem 0.25rem 0.5rem ${colorTransform(props.baseColor.primary, targets.shadow)}, inset -0.25rem -0.25rem 0.5rem ${colorTransform(props.baseColor.primary, targets.highlight)}`,\n            color: props.baseColor.text,\n            \"& span\": {\n                fontSize: \"0.95em\"\n            }\n        }\n    }),\n    flat: (props) => ({\n        background: props.baseColor.primary,\n    }),\n    inward: (props) => ({\n        background: `linear-gradient(145deg, ${colorTransform(props.baseColor.primary, targets.darkerAccent)}, ${colorTransform(props.baseColor.primary, targets.lighterAccent)})`,\n    }),\n    outward: (props) => ({\n        background: `linear-gradient(145deg, ${colorTransform(props.baseColor.primary, targets.lighterAccent)}, ${colorTransform(props.baseColor.primary, targets.darkerAccent)})`,\n    }),\n});\n\nconst Button = ({ label, onClick, type }) => {\n    const baseColor = useContext(BaseColorContext);\n    const classes = useStyles({ baseColor });\n\n    return <button className={classNames(classes.button, classes[type])} onClick={onClick}><span>{label}</span></button>;\n};\n\nButton.propTypes = {\n    label: PropTypes.string.isRequired,\n    onClick: PropTypes.func,\n    type: PropTypes.oneOf(['flat', 'inward', 'outward'])\n}\n\nButton.defaultProps = {\n    type: 'flat'\n}\n\nexport default Button;","import React from 'react';\n\nconst Input = ({label, onClick}) => {\n    return <input onClick={onClick} placeholder={label}></input>;\n};\n\nexport default Input;\n","import React from 'react';\nimport Button from 'ne-ui/Button/Button';\nimport Input from 'ne-ui/Input/Input';\n\nconst Main = () => {\n    const visitorNumber = Math.floor(Math.random() * 500000 + 500000);\n\n    return (\n        <div>\n            <div>You're visitor number {visitorNumber}</div>\n            <div>This is a button:</div>\n            <Button label=\"This button\" />\n            <div>This is an input:</div>\n            <Input label=\"This input\" />\n        </div>\n    )\n}\n\nexport default Main;","import React, { useContext } from 'react';\nimport Main from 'components/main/Main';\nimport { createUseStyles } from 'react-jss';\nimport BaseColorContext from 'ne-ui/utils/BaseColorContext';\n\nconst useStyles = createUseStyles({\n  appContainer: props => ({\n    textAlign: \"center\",\n    height: \"100%\",\n    backgroundColor: props.baseColor.primary,\n  })\n});\n\nfunction App() {\n  const baseColor = useContext(BaseColorContext);\n  const classes = useStyles({ baseColor });\n  return (\n    <div className={classes.appContainer}>\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}